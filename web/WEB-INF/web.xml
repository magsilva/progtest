<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	<description>ProgTest</description>

	<!--
		Trinidad related configuration. Futher information can be found at 
		"http://myfaces.apache.org/trinidad/devguide/configuration.html" Caching 
		optimization that Trinidad applies. Although it can speed up AJAX applications, 
		special care must be take about thread safety. This options is known to interfere 
		with some other JSF technologies (in particular, the Apache MyFaces Tomahawk 
		saveState component does not work, and template text in Facelets may appear 
		in duplicate).
	-->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.CACHE_VIEW_ROOT</param-name>
		<param-value>false</param-value>
	</context-param>
	
	<!--
		In "token"-based client-side state saving, chooses how many tokens 
		should be preserved at any one time. The default value is 15. When this is 
		exceeded, state will have effectively been "forgotten" for the least recently 
		viewed pages, which can impact users that actively use the Back button or 
		that have multiple windows open simultaneously. -->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.CLIENT_STATE_MAX_TOKENS</param-name>
		<param-value>15</param-value>
	</context-param>

	<!-- Enables an optimized strategy for caching some view state at an application 
		level, which significantly improves scalability. However, it makes it harder 
		to develop (updates to pages will not be noticed until the server is restarted), 
		and in some rare cases cannot be used for some pages. 
	-->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.USE_APPLICATION_VIEW_CACHE</param-name>
		<param-value>false</param-value>
	</context-param>
	
	<!--
		Trinidad by default obfuscates the Javascript it delivers to the client, 
		as well as stripping comments and whitespace. This dramatically reduces the 
		size of our Javascript download, but also makes it tricky to debug the Javascript. 
		This flag can be set to true to turn off the obfuscation.
	-->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.DEBUG_JAVASCRIPT</param-name>
		<param-value>true</param-value>
	</context-param>
	
	<!--
		Trinidad by default compresses the style class names inside the css 
		that is generated on the server. However, when developing custom Trinidad 
		skins, it is much easier to work with the non-compressed style class names, 
		which much more directly relate to those used in the skin css file. This 
		flag can be set to turn off automatic compression of style class names.
	-->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.DISABLE_CONTENT_COMPRESSION</param-name>
		<param-value>true</param-value>
	</context-param>
	
	<!--
		If this parameter is enabled by setting to "true", Apache Trinidad 
		will automatically check the modification date of your JSPs, and discard 
		saved state when they change.
	-->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.CHECK_FILE_MODIFICATION</param-name>
		<param-value>true</param-value>
	</context-param>
	
	<!--
		The parameters below are related to the default UploadedFileProcessor 
		provided by Trinidad. If you have set the "uploaded-file-processor" option 
		at trinidad-config.xml, you can ignore the UPLOAD related paramaters below. 
		Maximum memory per request (in bytes). This restricts the maximum upload 
		size too.
	-->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.UPLOAD_MAX_MEMORY</param-name>
		<param-value>10485760</param-value>
	</context-param>
	
	<!-- Maximum disk space per request (in bytes) -->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.UPLOAD_MAX_DISK_SPACE</param-name>
		<param-value>10485760</param-value>
	</context-param>
	
	<!-- Tiles configuration (required by the listener). -->
	<context-param>
		<param-name>org.apache.tiles.impl.BasicTilesContainer.DEFINITIONS_CONFIG</param-name>
		<param-value>/WEB-INF/tiles-defs.xml,/org/apache/tiles/classpath-defs.xml</param-value>
	</context-param>
	
	<!-- Change to "Production" when you are ready to deploy -->
	<context-param>
		<param-name>javax.faces.PROJECT_STAGE</param-name>
		<param-value>Development</param-value>
	</context-param>
	
	<!-- * server: * client: -->	
	<context-param>
		<param-name>javax.faces.STATE_SAVING_METHOD</param-name>
		<param-value>client</param-value>
	</context-param>
	
	<context-param>
		<param-name>org.jboss.jbossfaces.WAR_BUNDLES_JSF_IMPL</param-name>
		<param-value>true</param-value>
	</context-param>
	
	<!-- 
		If true, rendered HTML code will be formatted, so that it is "human readable",
		i.e. additional line separators and whitespace will be written, that do not
		influence the HTML code. Default: "true".
	 -->
	<context-param>
		<param-name>org.apache.myfaces.PRETTY_HTML</param-name>
		<param-value>true</param-value>
	</context-param>
	
	<!--
		This parameter tells MyFaces if javascript code should be allowed in the
		rendered HTML output. If javascript is allowed, command_link anchors will
		have javascript code that submits the corresponding form. If javascript is
		not allowed, the state saving info and nested parameters will be added as
		url parameters. Default: "true".
	-->
	<context-param>
		<param-name>org.apache.myfaces.ALLOW_JAVASCRIPT</param-name>
		<param-value>true</param-value>
	</context-param>

	<!--
		This parameter tells MyFaces if javascript code should be allowed in the
		rendered HTML output. If javascript is allowed, command_link anchors will
		have javascript code that submits the corresponding form. If javascript
		is not allowed, the state saving info and nested parameters will be
		Added as url parameters. Default: "false".
	-->
	<context-param>
		<param-name>org.apache.myfaces.DETECT_JAVASCRIPT</param-name>
		<param-value>false</param-value>
	</context-param>


	<!-- 
		If true, a javascript function will be rendered that is able to restore
		the former vertical scroll on every request. Convenient feature if you
		have pages with long lists and you do not want the browser page to always
		jump to the top if you trigger a link or button action that stays on the
		same page. Default: "false".
	-->
	<context-param>
		<param-name>org.apache.myfaces.AUTO_SCROLL</param-name>
		<param-value>true</param-value>
	</context-param>
	
	<!-- 
		SUN JSF Reference Implementation parameters
		http://wiki.glassfish.java.net/Wiki.jsp?page=JavaServerFacesRI
	
		Maximum number of serialized views stored in the session.
		works with server state saving. Default is 15.</description>
	-->
	<context-param>
		<param-name>com.sun.faces.numberOfViewsInSession</param-name>
		<param-value>15</param-value>
	</context-param>

	<!-- 
		This parameter defines the maximum number of logical views to store
		per session. The map used to store the logical views uses an LRU
		algorighm to keep the map from growing beyond the configured value.
		Default is 15.
	-->
	<context-param>
		<param-name>com.sun.faces.numberOfLogicalViews</param-name>
		<param-value>15</param-value>
	</context-param>

	<!-- Set the content type as xhtml. -->	
	<context-param>
		<param-name>com.sun.faces.preferXHTML</param-name>
		<param-value>true</param-value>
	</context-param>

	<!--
		When true the view is compressed after it is serialized and before
		base64 encoded. Works with client state saving.
	-->
	<context-param>
		<param-name>com.sun.faces.compressViewState</param-name>
		<param-value>true</param-value>
	</context-param>
	
	<context-param>
		<param-name>com.sun.faces.disableVersionTracking</param-name>
		<param-value>true</param-value>
	</context-param>

	<!-- 
		If true, then the JavaScript rendered by h:commandLink will be
		compressed to reduce the amount of whitespace transmitted in the
		response. If false then the JavaScript will be rendered to the client
		in a well formatted manner. Default is true.
	-->
	<context-param>
		<param-name>com.sun.faces.compressJavaScript</param-name>
		<param-value>false</param-value>
	</context-param>

	<!--
		When true, writes the script element to a file and references it with
		a src attribute. This allows browsers to cache the JS resource instead
		of having to write it each time the page is accessed. Default is false.
	-->
	<context-param>
		<param-name>com.sun.faces.externalizeJavaScript</param-name>
		<param-value>true</param-value>
	</context-param>

	<!--
		The servlet specification defines an optional header that can be sent
		by a container to communicate the version of the JSP/Servlet the
		response was generated by. If this is enabled, then JSF/1.2 is
		included in this header.
	-->
	<context-param>
		<param-name>com.sun.faces.sendPoweredByHeader</param-name>
		<param-value>false</param-value>
	</context-param>

	<!--
		When true JSF makes sure all managed beans components, validators, etc
		can be instantiated by the runtime. Default is false.
	-->
	<context-param>
		<param-name>com.sun.faces.verifyObjects</param-name>
		<param-value>true</param-value>
	</context-param>

	<!--
		When true JSF validates the configuration files. Default is false.
	-->
	<context-param>
		<param-name>com.sun.faces.validateXml</param-name>
		<param-value>false</param-value>
	</context-param>
	
	<context-param>
		<param-name>DATA_DIR</param-name>
		<param-value>/upload</param-value>
	</context-param>
	
	<context-param>
		<param-name>javax.faces.CONFIG_FILES</param-name>
		<param-value>/WEB-INF/faces-config.xml</param-value>
	</context-param>
	
	<!-- Trinidad filter. -->
	<filter>
		<filter-name>trinidad</filter-name>
		<filter-class>org.apache.myfaces.trinidad.webapp.TrinidadFilter</filter-class>
	</filter>
	
	<!-- 
	<filter>
		<filter-name>tiles</filter-name>
		<filter-class>org.apache.tiles.web.startup.TilesFilter</filter-class>
		<init-param>
			<param-name>org.apache.tiles.impl.BasicTilesContainer.DEFINITIONS_CONFIG</param-name>
			<param-value>/WEB-INF/tiles-defs.xml,/org/apache/tiles/classpath-defs.xml</param-value>
		</init-param>
	</filter>
	-->
	
	<!--
		Configuration of filter required by Tomahawk 
	-->
	<filter>
		<filter-name>MyFacesExtensionsFilter</filter-name>
		<filter-class>org.apache.myfaces.webapp.filter.ExtensionsFilter</filter-class>
		<init-param>
			<description>Set the size limit for uploaded files. Format: 10 - 10
				bytes, 10k - 10 KB, 10m - 10 MB, 1g - 1 GB</description>
			<param-name>maxFileSize</param-name>
			<param-value>20m</param-value>
		</init-param>
	</filter>
	
	<!-- 
	<filter-mapping>
		<filter-name>tiles</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
	</filter-mapping>
	-->
	
	<!-- Mapping of Trinidad filter -->
	<filter-mapping>
		<filter-name>trinidad</filter-name>
		<servlet-name>JSF servlet</servlet-name>
	</filter-mapping>

	
	<!--
		Extension mapping for adding <script/>, <link/>, and other resource 
		tags to JSF-pages. The 'servlet-name' must match the name of your
		javax.faces.webapp.FacesServlet	entry
	-->
	<filter-mapping>
		<filter-name>MyFacesExtensionsFilter</filter-name>
		<servlet-name>JSF servlet</servlet-name>
	</filter-mapping>
	
	<!--
		Extension mapping for serving page-independent resources (javascript, 
		stylesheets, images, etc.). This mapping is required as is by the MyFaces 
		Extension. Do not fuss with it!
	-->
	<filter-mapping>
		<filter-name>MyFacesExtensionsFilter</filter-name>
		<url-pattern>/faces/myFacesExtensionResource/*</url-pattern>
	</filter-mapping>
	
	<!--
		 Tiles listener. You may use the CompleteAutoLoad, Simple or Modular TilesListener.
		 Check http://tiles.apache.org/framework/config-reference.html for the best option.
		 For now, we will opt out for the complete version.
	-->
	<listener>
		<listener-class>org.apache.tiles.extras.complete.CompleteAutoloadTilesListener</listener-class>
	</listener>

	
	<!--
		This listener is required by JSF to avoid errors in the initialization:
		java.lang.IllegalStateException: Could not find backup for factory javax.faces.context.FacesContextFactory
	-->
	<!-- If using JSF RI (Monjarra), you should use the following listener -->
	<!--  
	<listener>
		<listener-class>com.sun.faces.config.ConfigureListener</listener-class> 
	</listener>
	-->
	<!-- If using MyFaces, you should use the following listener -->
	<listener>
		<listener-class>org.apache.myfaces.webapp.StartupServletContextListener</listener-class>
	</listener>
	
	<!-- Java Server Faces main servlet -->
	<servlet>
		<servlet-name>JSF servlet</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<!-- 
	<servlet>
		<servlet-name>resources</servlet-name>
		<servlet-class>org.apache.myfaces.trinidad.webapp.ResourceServlet</servlet-class>
	</servlet>
	-->
	
	<!--
		The Tiles servlet is just a startup servlet and it does 
		not serve any request. Therefore, a mapping is not needed.
	-->
	<!-- 
	<servlet>
		<servlet-name>TilesServlet</servlet-name>
		<servlet-class>org.apache.tiles.web.startup.TilesServlet</servlet-class>
		<init-param>
			<param-name>org.apache.tiles.impl.BasicTilesContainer.DEFINITIONS_CONFIG</param-name>
			<param-value>/WEB-INF/tiles-defs.xml,/org/apache/tiles/classpath-defs.xml</param-value>
		</init-param>
		<load-on-startup>2</load-on-startup>
	</servlet>
	-->
	
	<!-- 
	<servlet>
    	<servlet-name>Tiles Dispatch Servlet</servlet-name>
    	<servlet-class>org.apache.tiles.web.util.TilesDispatchServlet</servlet-class>
	</servlet>
	-->

	<!--
		Mappings to JSF servlet
	-->
	<servlet-mapping>
		<servlet-name>JSF servlet</servlet-name>
		<url-pattern>*.jsf</url-pattern>
	</servlet-mapping>
	
	
	<!-- 
	<servlet-mapping>
		<servlet-name>resources</servlet-name>
		<url-pattern>/adf/*</url-pattern>
	</servlet-mapping>
	-->
	
	<!-- 
	<error-page>
		<error-code>404</error-code>
		<location>/pages/error/error404.jsp</location>
	</error-page>
	
	<error-page>
		<error-code>500</error-code>
		<location>/index.jsp</location>
	</error-page>
	-->
	
	<!-- 
	<login-config>
		<auth-method>BASIC</auth-method>
	</login-config>
	-->
</web-app>
