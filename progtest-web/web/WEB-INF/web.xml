<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	<description>ProgTest</description>


	<!--
		GoogleApp compatibility. We need to set annotation lifecycyle provider manually as
		org.apache.myfaces.config.annotation.NoInjectionAnnotationLifecycleProvider.
        Other providers use some classes that are restricted on Google App Engine.   
	-->  
	<context-param>
		<param-name>org.apache.myfaces.config.annotation.LifecycleProvider</param-name>
		<param-value>org.apache.myfaces.config.annotation.NoInjectionAnnotationLifecycleProvider</param-value>
	</context-param>

	<!--
		Need to set a secret to avoid javax.crypto.BadPaddingException. "param-value" must
		be Base64 encoded. More details: http://wiki.apache.org/myfaces/Secure_Your_Application
	-->
	<context-param>
		<param-name>org.apache.myfaces.SECRET</param-name>
		<param-value>NzY1NDMyMTA=</param-value>
	</context-param>
	
	<context-param>
		<param-name>javax.faces.DEFAULT_SUFFIX</param-name>
		<param-value>.xhtml</param-value>
	</context-param>

	<!--
		Trinidad by default obfuscates the Javascript it delivers to the client, 
		as well as stripping comments and whitespace. This dramatically reduces the 
		size of our Javascript download, but also makes it tricky to debug the Javascript. 
		This flag can be set to true to turn off the obfuscation.
	-->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.DEBUG_JAVASCRIPT</param-name>
		<param-value>false</param-value>
	</context-param>
	
	<!--
		Trinidad by default compresses the style class names inside the css 
		that is generated on the server. However, when developing custom Trinidad 
		skins, it is much easier to work with the non-compressed style class names, 
		which much more directly relate to those used in the skin css file. This 
		flag can be set to turn off automatic compression of style class names.
	-->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.DISABLE_CONTENT_COMPRESSION</param-name>
		<param-value>true</param-value>
	</context-param>
	
	<!--
		The parameters below are related to the default UploadedFileProcessor 
		provided by Trinidad. If you have set the "uploaded-file-processor" option 
		at trinidad-config.xml, you can ignore the UPLOAD related paramaters below. 
		Maximum memory per request (in bytes). This restricts the maximum upload 
		size too.
	-->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.UPLOAD_MAX_MEMORY</param-name>
		<param-value>10485760</param-value>
	</context-param>
	
	<!-- Maximum disk space per request (in bytes) -->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.UPLOAD_MAX_DISK_SPACE</param-name>
		<param-value>10485760</param-value>
	</context-param>
	
	
	<!-- Change to "Production" when you are ready to deploy -->
	<!-- 
	<context-param>
		<param-name>javax.faces.PROJECT_STAGE</param-name>
		<param-value>Development</param-value>
	</context-param>
	-->
	
	<!--
		Control state saving (client or server). It is highly recommended to
		set it to client.	
	-->	
	<context-param>
		<param-name>javax.faces.STATE_SAVING_METHOD</param-name>
		<param-value>client</param-value>
	</context-param>
	
	<context-param>
		<param-name>DATA_DIR</param-name>
		<param-value>/upload</param-value>
	</context-param>
	

	<!-- 
		JSF configuration
	-->
	<!--
		This listener is required by JSF to avoid errors in the initialization:
		java.lang.IllegalStateException: Could not find backup for factory javax.faces.context.FacesContextFactory
	-->
	<!-- If using JSF RI (Monjarra), you should use the following listener -->
	<!--  
	<listener>
		<listener-class>com.sun.faces.config.ConfigureListener</listener-class> 
	</listener>
	-->
	<!-- If using MyFaces, you should use the following listener -->
	<listener>
		<listener-class>org.apache.myfaces.webapp.StartupServletContextListener</listener-class>
	</listener>
	
	<!-- Java Server Faces main servlet -->
	<servlet>
		<servlet-name>JSF servlet</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!--
		Mappings to JSF servlet
	-->
	<servlet-mapping>
		<servlet-name>JSF servlet</servlet-name>
		<url-pattern>*.jsf</url-pattern>
	</servlet-mapping>

	<!--
		Mappings to JSF servlet
	-->
	<servlet-mapping>
		<servlet-name>JSF servlet</servlet-name>
		<url-pattern>/pages/*</url-pattern>
	</servlet-mapping>


	<!-- 
		Tiles
	-->
	<!--
		 Tiles listener. You may use the CompleteAutoLoad, Simple or Modular TilesListener.
		 Check http://tiles.apache.org/framework/config-reference.html for the best option.
		 For now, we will opt out for the complete version.
	-->
	<listener>
		<listener-class>org.apache.tiles.web.startup.simple.SimpleTilesListener</listener-class>
	</listener>



	<!--
		Tomahawk configuration 
	-->
	<!--
		Configuration of filter required by Tomahawk
	-->
	<filter>
		<filter-name>MyFacesExtensionsFilter</filter-name>
		<filter-class>org.apache.myfaces.webapp.filter.ExtensionsFilter</filter-class>
		<init-param>
			<description>Set the size limit for uploaded files. Format: 10 - 10
				bytes, 10k - 10 KB, 10m - 10 MB, 1g - 1 GB</description>
			<param-name>maxFileSize</param-name>
			<param-value>20m</param-value>
		</init-param>
	</filter>

	<!-- extension mapping for adding <script/>, <link/>, and other resource tags to JSF-pages  -->
	<!-- 
	<filter-mapping>
    	<filter-name>MyFacesExtensionsFilter</filter-name>
    	<servlet-name>JSF servlet</servlet-name>
	</filter-mapping>
	-->

	<!--
		Extension mapping for serving page-independent resources (javascript, 
		stylesheets, images, etc.). This mapping is required as is by the MyFaces 
		Extension. Do not fuss with it!
	-->
	<filter-mapping>
		<filter-name>MyFacesExtensionsFilter</filter-name>
		<url-pattern>/faces/myFacesExtensionResource/*</url-pattern>
	</filter-mapping>
	



	<!-- Trinidad filter. -->
	<filter>
		<filter-name>trinidad</filter-name>
		<filter-class>org.apache.myfaces.trinidad.webapp.TrinidadFilter</filter-class>
	</filter>
	
	<!-- Mapping of Trinidad filter -->
	<!-- 
	<filter-mapping>
		<filter-name>trinidad</filter-name>
		<servlet-name>JSF servlet</servlet-name>
	</filter-mapping>
	-->

	<!-- Trinidad resource serving servlet -->
	<servlet>
		<servlet-name>resources</servlet-name>
		<servlet-class>org.apache.myfaces.trinidad.webapp.ResourceServlet</servlet-class>
	</servlet>

	<!-- Configuration required by Trinidad, do not fuss with it -->
	<servlet-mapping>
		<servlet-name>resources</servlet-name>
		<url-pattern>/adf/*</url-pattern>
	</servlet-mapping>
	
	<!-- 
	<error-page>
		<error-code>404</error-code>
		<location>/pages/error/error404.jsp</location>
	</error-page>
	
	<error-page>
		<error-code>500</error-code>
		<location>/index.jsp</location>
	</error-page>
	-->
	
	<!-- 
	<login-config>
		<auth-method>BASIC</auth-method>
	</login-config>
	-->
</web-app>
