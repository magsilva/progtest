package progtest.view.instructor;

import java.util.Date;

import javax.faces.application.FacesMessage;

import org.apache.myfaces.custom.fileupload.UploadedFile;

import progtest.common.Assigment;
import progtest.common.Course;
import progtest.database.AssigmentDAO;
import progtest.execution.Runner;
import progtest.util.Constants;
import progtest.util.ContextManager;

public class CreateAssigment {

	private UploadedFile file;

	private String title = Constants.VAZIO;

	private String description = Constants.VAZIO;

	private Date startDate = new Date();

	private Date endDate = new Date();

	private String weightFunctional = String.valueOf(1);

	private String weightAllNodes = String.valueOf(1);

	private String weightAllEdges = String.valueOf(1);

	private String weightAllUses = String.valueOf(1);

	private String weightAllPotUses = String.valueOf(1);

	private String weightPalTal = String.valueOf(1);

	private String weightPinstTal = String.valueOf(1);

	private String weightPalTinst = String.valueOf(1);

	public UploadedFile getFile() {
		return file;
	}

	public void setFile(UploadedFile file) {
		this.file = file;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Date getStartDate() {
		return startDate;
	}

	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	public Date getEndDate() {
		return endDate;
	}

	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}

	public String getWeightFunctional() {
		return weightFunctional;
	}

	public void setWeightFunctional(String weightFunctional) {
		this.weightFunctional = weightFunctional;
	}

	public String getWeightAllNodes() {
		return weightAllNodes;
	}

	public void setWeightAllNodes(String weightAllNodes) {
		this.weightAllNodes = weightAllNodes;
	}

	public String getWeightAllEdges() {
		return weightAllEdges;
	}

	public void setWeightAllEdges(String weightAllEdges) {
		this.weightAllEdges = weightAllEdges;
	}

	public String getWeightAllUses() {
		return weightAllUses;
	}

	public void setWeightAllUses(String weightAllUses) {
		this.weightAllUses = weightAllUses;
	}

	public String getWeightAllPotUses() {
		return weightAllPotUses;
	}

	public void setWeightAllPotUses(String weightAllPotUses) {
		this.weightAllPotUses = weightAllPotUses;
	}

	public String getWeightPalTal() {
		return weightPalTal;
	}

	public void setWeightPalTal(String weightPalTal) {
		this.weightPalTal = weightPalTal;
	}

	public String getWeightPinstTal() {
		return weightPinstTal;
	}

	public void setWeightPinstTal(String weightPinstTal) {
		this.weightPinstTal = weightPinstTal;
	}

	public String getWeightPalTinst() {
		return weightPalTinst;
	}

	public void setWeightPalTinst(String weightPalTinst) {
		this.weightPalTinst = weightPalTinst;
	}

	public String create() {

		Course course = (Course) ContextManager
				.getSession(Constants.SESSION_COURSE);

		if (validate()) {

			Assigment assigment = new Assigment();
			assigment.setCourse(course);
			assigment.setTitle(title);
			assigment.setDescription(description);
			assigment.setWeightFunctional(Integer.parseInt(weightFunctional));
			assigment.setWeightAllNodes(Integer.parseInt(weightAllNodes));
			assigment.setWeightAllEdges(Integer.parseInt(weightAllEdges));
			assigment.setWeightAllUses(Integer.parseInt(weightAllUses));
			assigment.setWeightAllPotUses(Integer.parseInt(weightAllPotUses));
			assigment.setWeightPalTal(Integer.parseInt(weightPalTal));
			assigment.setWeightPinstTal(Integer.parseInt(weightPinstTal));
			assigment.setWeightPalTinst(Integer.parseInt(weightPalTinst));

			ContextManager.setSession(Constants.SESSION_ASSIGMENT, assigment);

			return Constants.ACTION_SUCCESS;

		}

		return Constants.ACTION_FAILURE;

	}

	private boolean validate() {

		if (title.equals(Constants.VAZIO)
				|| description.equals(Constants.VAZIO)) {

			ContextManager.addMessage(Constants.KEY_ERROR_EMPTYBLANKS,
					FacesMessage.SEVERITY_ERROR);

		} else if (startDate.getTime() > endDate.getTime()) {

			ContextManager.addMessage(Constants.KEY_ERROR_DATEINCONSISTENT,
					FacesMessage.SEVERITY_ERROR);

		} else {

			return true;

		}

		return false;

	}

	public String upload() {
		
		Assigment assigment = (Assigment) ContextManager
				.getSession(Constants.SESSION_ASSIGMENT);
		
		AssigmentDAO.insert(assigment);
		
		Runner.executePinstTinst(file, assigment);
		
		reset();

		return Constants.ACTION_SUCCESS;

	}

	public String back() {
		return Constants.ACTION_BACK;
	}

	public void reset() {
		file = null;
		title = Constants.VAZIO;
		description = Constants.VAZIO;
		startDate = new Date();
		endDate = new Date();
		weightFunctional = String.valueOf(1);
		weightAllNodes = String.valueOf(1);
		weightAllEdges = String.valueOf(1);
		weightAllUses = String.valueOf(1);
		weightAllPotUses = String.valueOf(1);
		weightPalTal = String.valueOf(1);
		weightPinstTal = String.valueOf(1);
		weightPalTinst = String.valueOf(1);
	}

	public String cancel() {
		reset();
		return Constants.ACTION_CANCEL;
	}

}
